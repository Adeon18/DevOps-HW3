name: CI/CD Blue-Green Deployment (AKS)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/devops-hw3:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/devops-hw3:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Output image tag
      id: image
      run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

      # Auth CLI
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Set up kube
    - name: Set up kubectl
      run: |
        az aks get-credentials --resource-group myAKSResourceGroup2f5e50 --name myAKSCluster2f5e50 --overwrite-existing

    # Update Kubernetes resources using Kustomize
    - name: Update Kubernetes resources with Kustomize
      run: |
        cd k8s
        kustomize edit set namespace my-app
        kustomize edit set image ${{ secrets.DOCKER_USERNAME }}/devops-hw3:$GITHUB_SHA
        cat kustomization.yaml

    # Commit updated Kubernetes manifests
    - name: Commit updated Kubernetes manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/kustomization.yaml k8s/app-v1.yaml k8s/app-v2.yaml
        git commit -m "Update Kubernetes resource definitions with new image tag"
        git push

    # (Blue Deployment)
    - name: Deploy version 1
      run: |
        kubectl apply -f k8s/app-v1.yaml
        kubectl rollout status deployment/my-app-v1 -w

    # (Green Deployment)
    - name: Deploy version 2
      run: |
        kubectl apply -f k8s/app-v2.yaml
        kubectl rollout status deployment/my-app-v2 -w

    # Switch traffic to v2
    - name: Switch traffic to version 2
      run: |
        kubectl patch service my-app -p '{"spec":{"selector":{"version":"v2.0.0"}}}'

    # Clean v1
    - name: Delete version 1
      run: |
        kubectl delete deployment my-app-v1 || true
